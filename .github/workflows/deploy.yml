name: Deploy

on:
  push:
    branches: [dev, staging, main]

permissions:
  contents: read
  id-token: write

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Decide env from branch -> dev|staging|prod
      - name: Derive env from branch
        id: derive
        shell: bash
        run: |
          case "${GITHUB_REF#refs/heads/}" in
            dev)     ENV_NAME=dev ;;
            staging) ENV_NAME=staging ;;
            main)    ENV_NAME=prod ;;
            *) echo "::error ::Unsupported branch ${GITHUB_REF}"; exit 1 ;;
          esac
          echo "env_name=${ENV_NAME}" >> "$GITHUB_OUTPUT"

      # Load root .env (exactly the file you showed)
      - name: Load .env
        id: loadenv
        shell: bash
        run: |
          test -f .env || { echo "::error::.env missing"; exit 1; }
          set -a; source .env; set +a
          # persist to later steps
          grep -Ev '^\s*#' .env >> "$GITHUB_ENV"
          # outputs for expressions
          echo "AWS_REGION=${AWS_REGION}"           >> "$GITHUB_OUTPUT"
          echo "ECR_ACCOUNT_ID=${ECR_ACCOUNT_ID}"   >> "$GITHUB_OUTPUT"
          echo "ECR_REPOSITORY=${ECR_REPOSITORY}"   >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME=${IMAGE_NAME}"           >> "$GITHUB_OUTPUT"

      # One OIDC role for all envs
      - name: Configure AWS (single OIDC role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # If you have ROLE_ARN in .env, prefer that; otherwise default to gha-oidc-simple
          role-to-assume: ${{ env.ROLE_ARN || format('arn:aws:iam::{0}:role/gha-oidc-simple', steps.loadenv.outputs.ECR_ACCOUNT_ID) }}
          aws-region: ${{ steps.loadenv.outputs.AWS_REGION }}

      - name: Ensure ECR repository exists
        env:
          ECR_REPOSITORY: ${{ steps.loadenv.outputs.ECR_REPOSITORY }}
        run: |
          aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${ECR_REPOSITORY}" >/dev/null

      - name: Login to ECR
        env:
          AWS_REGION:     ${{ steps.loadenv.outputs.AWS_REGION }}
          ECR_ACCOUNT_ID: ${{ steps.loadenv.outputs.ECR_ACCOUNT_ID }}
        run: |
          aws ecr get-login-password \
            | docker login --username AWS --password-stdin \
              ${ECR_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

      - name: Build image
        env:
          IMAGE_NAME: ${{ steps.loadenv.outputs.IMAGE_NAME }}
        run: |
          docker build -t "${IMAGE_NAME}:latest" -f app/Dockerfile app

      - name: Tag & push image
        id: pushimg
        env:
          AWS_REGION:     ${{ steps.loadenv.outputs.AWS_REGION }}
          ECR_ACCOUNT_ID: ${{ steps.loadenv.outputs.ECR_ACCOUNT_ID }}
          ECR_REPOSITORY: ${{ steps.loadenv.outputs.ECR_REPOSITORY }}
          IMAGE_NAME:     ${{ steps.loadenv.outputs.IMAGE_NAME }}
          SHA:            ${{ github.sha }}
        run: |
          ECR_REGISTRY="${ECR_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${SHA}"
          docker tag "${IMAGE_NAME}:latest" "${IMAGE_URI}"
          docker push "${IMAGE_URI}"
          echo "image_uri=${IMAGE_URI}" >> "$GITHUB_OUTPUT"

      - name: Terraform apply (envs/${{ steps.derive.outputs.env_name }})
        working-directory: infra/envs/${{ steps.derive.outputs.env_name }}
        env:
          TF_VAR_image_uri: ${{ steps.pushimg.outputs.image_uri }}
        run: |
          terraform init -input=false
          terraform apply  -input=false -auto-approve
