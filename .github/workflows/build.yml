name: Build

on:
  push:
    branches: ["**"]

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  validate-terraform-and-docker:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Load .env for common vars (AWS_REGION, ECR_ACCOUNT_ID, IMAGE_NAME, etc.)
      # We will IGNORE any ECR_REPOSITORY in .env and override it next.
      - name: Load .env
        id: env
        shell: bash
        run: |
          test -f .env || { echo ".env missing"; exit 1; }
          set -a; source .env; set +a
          # Export everything except commented lines into the job env
          grep -Ev '^\s*#' .env >> "$GITHUB_ENV"
          # Expose a few as step outputs if you need them later
          echo "AWS_REGION=$AWS_REGION" >> "$GITHUB_OUTPUT"
          echo "ECR_ACCOUNT_ID=$ECR_ACCOUNT_ID" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_OUTPUT"

      # Derive deploy environment and ECR repository name from branch
      - name: Derive env from branch -> ECR repo
        id: branch
        shell: bash
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          case "$BRANCH" in
            main)    DEPLOY_ENV="prod";    REPO="prod-urlshortener" ;;
            staging) DEPLOY_ENV="staging"; REPO="staging-urlshortener" ;;
            dev)     DEPLOY_ENV="dev";     REPO="dev-urlshortener" ;;
            *)       DEPLOY_ENV="dev";     REPO="dev-urlshortener" ;;
          esac
          echo "DEPLOY_ENV=$DEPLOY_ENV" >> "$GITHUB_ENV"
          echo "ECR_REPOSITORY=$REPO"    >> "$GITHUB_ENV"
          echo "DEPLOY_ENV=$DEPLOY_ENV" >> "$GITHUB_OUTPUT"
          echo "ECR_REPOSITORY=$REPO"   >> "$GITHUB_OUTPUT"
          echo "Using branch '$BRANCH' -> env='$DEPLOY_ENV', repo='$REPO'"

      - name: Set up Python for Checkov
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Checkov
        run: |
          pip install --upgrade pip
          pip install checkov

      - name: Run Checkov (do not fail the job)
        id: checkov
        continue-on-error: true
        run: |
          if checkov -d . --framework terraform --output cli --quiet; then
            echo "checkov_failed=false" >> "$GITHUB_OUTPUT"
          else
            echo "checkov_failed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Build Docker image for scanning
        run: |
          docker build -t "${IMAGE_NAME}:latest" -f app/Dockerfile app

      - name: Trivy image â†’ SARIF (do not fail, just report)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ steps.env.outputs.IMAGE_NAME }}:latest
          format: sarif
          output: trivy-image.sarif
          exit-code: "0"

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ steps.env.outputs.ECR_ACCOUNT_ID }}:role/gha-oidc-simple
          aws-region: ${{ steps.env.outputs.AWS_REGION }}

      # Optional: keep while you migrate infra creation to Terraform
      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${ECR_REPOSITORY}" >/dev/null

      - name: Login to ECR
        run: |
          aws ecr get-login-password | docker login --username AWS --password-stdin \
            ${ECR_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

      - name: Tag and push image to ECR
        id: push
        run: |
          ECR_REGISTRY="${ECR_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA}"
          docker tag "${IMAGE_NAME}:latest" "${IMAGE_URI}"
          docker push "${IMAGE_URI}"
          echo "image_uri=${IMAGE_URI}" >> "$GITHUB_OUTPUT"

      # --- Terraform toolchain & checks ---
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.x
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Format Check
        continue-on-error: true
        run: terraform fmt -check -recursive

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --init

      - name: Run TFLint
        run: tflint

      - name: Validate Terraform
        run: terraform validate
