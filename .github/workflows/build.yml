name: Build

on:
  push:
    branches: ["**"]

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  validate-terraform-and-docker:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load .env
        id: env
        shell: bash
        run: |
          test -f .env || { echo ".env missing"; exit 1; }
          set -a; source .env; set +a
          grep -Ev '^\s*#' .env >> "$GITHUB_ENV"
          echo "AWS_REGION=$AWS_REGION" >> "$GITHUB_OUTPUT"
          echo "ECR_ACCOUNT_ID=$ECR_ACCOUNT_ID" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_OUTPUT"

      - name: Derive env from branch (no repo/push here)
        id: branch
        shell: bash
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          case "$BRANCH" in
            main)    DEPLOY_ENV=prod ;;
            staging) DEPLOY_ENV=staging ;;
            dev)     DEPLOY_ENV=dev ;;
            *)       DEPLOY_ENV=dev ;;
          esac
          echo "DEPLOY_ENV=$DEPLOY_ENV" >> "$GITHUB_ENV"
          echo "DEPLOY_ENV=$DEPLOY_ENV" >> "$GITHUB_OUTPUT"

      - name: Set up Python for Checkov
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Checkov
        run: |
          pip install --upgrade pip
          pip install checkov

      - name: Run Checkov (non-blocking)
        id: checkov
        continue-on-error: true
        run: |
          if checkov -d . --framework terraform --output cli --quiet; then
            echo "checkov_failed=false" >> "$GITHUB_OUTPUT"
          else
            echo "checkov_failed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Build Docker image for scanning (no push)
        run: |
          docker build -t "${IMAGE_NAME}:latest" -f app/Dockerfile app

      - name: Trivy image â†’ SARIF (non-blocking)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ steps.env.outputs.IMAGE_NAME }}:latest
          format: sarif
          output: trivy-image.sarif
          exit-code: "0"

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.x
          terraform_wrapper: false

      - name: Terraform Init (lint-only)
        run: terraform init -backend=false

      - name: Terraform Format Check (non-blocking)
        continue-on-error: true
        run: terraform fmt -check -recursive -no-color

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --init

      - name: Run TFLint
        run: tflint

      - name: Validate Terraform
        run: terraform validate
